#+title: C言語練習

* 学習の流れ
** 最初のプログラム
** 情報など
** 変数の宣言
** 関数
** 条件分岐
** 繰り返し
** 配列
** 構造体,共用体
** ポインタ
** 修飾
** コンパイルの流れ
*** ライブラリのリンク
** デバッガ(GDB)
** 総合

* 最初のプログラム

helloworld.c

$ gcc -Wall helloworld.c
$ ./a.out

** 実行ファイルができるまでの各工程

プリプロセス(ヘッダファイルの処理など)
  $ gcc -E 

コンパイル(.c -> .S)(アセンブラ)
  $ gcc -S

アセンブル(.s -> .o)(オブジェクトファイルの生成)
  $ gcc -c

** man gcc

* 情報

仕様のドラフト

  ISO C Working Group (http://www.open-std.org/jtc1/sc22/wg14/)
    9899: Programming Language C
      C11	ISO/IEC 9899:2011	N1570 [2011-04-04]

N1570のリンクからN1570.pdfが取得できます。

* 変数の宣言

** printfのマニュアル

$ man 3 printf

** コメント
*** 1行コメント
   // ........

*** 複数行対応
   /* xxxxxx */

   /* aaaaaa
      zzzzzz
    */

** 問題
 1. 整数値を変換指定を%dから%xに変えて実行してみよ。

* 関数 : 抽象化
関数(function)には、機能や働きという意味があります。
C言語における関数も同じで、一連の処理をまとめて、機能や働きを実現するためのものとなります。

例えば、printf関数は、指定された書式(f:format)で出力(print)する機能を持った関数ということになります。

** 関数と抽象化
関数の利用者は関数内にまとめられた処理について基本的には気にする必要がありません。

関数は名が体を表した関数は、いい関数。

** 関数定義

*** 実装
戻り値の型 関数名(引数の型 引数の名前)
{
  各種処理;

  return 戻り値;
}

戻り値が不要な場合は戻り値の型を void とします。
この場合は、return; を記述するか、return文を省略できます。

**** 1を返すmain関数(return1.c)
int main(void)
{
  return 1;
}

***** 実行例
$ gcc -Wall return1.c -o return1
$ ./return1 ; echo $?
1

*** プロトタイプ宣言
ファイルの先頭側で定義した関数1からファイルの後の方で定義した関数2を使用すると、
コンパイル時に警告:暗黙の型宣言がでます。これは、1のコンパイル時に関数2の型情報が無いためにでます。

この様な問題を回避するため、関数の型情報をプロトタイプ宣言としてファイルの先頭の方に記述します。

**** 例 : 暗黙の宣言(implicit declaration)
$ cat implicit.c 
int main(void)
{
  return f();
}

int f(void)
{
  return 1;
}

$ gcc -Wall f.c 
f.c: In function ‘main’:
f.c:3:10: warning: implicit declaration of function ‘f’ [-Wimplicit-function-declaration]
    3 |   return f();
      |          ^

**** 例 : プロトタイプ宣言
int f(void);

int main(void)
{
  return f();
}

int f(void)
{
  return 1;
}

$ gcc -Wall prototype.c 

*** 問題

  1. Hello world!
     1. 「Hello, world!」と標準出力に出力するプログラムを書いて下さい。
         main関数の中に直接実装してかまいません。

     2. 「Hello, world!」出力部分をprintHello関数として実装し、
         main関数から呼び出すようにして下さい。関数の型は以下の様にして下さい。

            void printHello(void)

  2. 2つの整数の和を計算するadd関数を実装し、main関数で呼び出してみなさい。

  3. 角度を度数の単位からラジアン単位に変換する関数を実装しなさい。

  4. 数値も文字を受け取り整数値として返す関数を実装しなさい。

     1. 0から9の文字をprintfの10進表記で出力させてみなさい。
	出力された結果から文字と値の関係性を考えてみよ。

  5. 標準入力から文字を取得する以下の関数を使ってみよ。

     $ man getchar

** モジュール, ライブラリ
- モジュール *.c
- ライブラリ
  .oを集めたもの

  - 静的 :  .a
  - 共有 : .so

** 関数型スタイルと再帰
変数への代入を行わないスタイル

関数型言語の場合は末尾再帰がスタックを使用しないgotoになるが、
C言語の場合はそうはならないので、再帰呼出しが深くなりスタック領域を
使い果たすとプログラムが異常終了する。

*** 再帰
**** 0からnまでの整数の和を求める関数

sum(n) = n + sum(n-1)  (n != 0)
sum(0) = 0             (n == 0)

具体的にすると

sum(10) = 10 + sum(9)
               9 + sum(8)
                   8 + sum(7)
:

**** 1からnまでの整数の積を求める関数

prod(n) = n * prod(n-1)  (n != 1)
prod(1) = 1              (n == 1)

* 条件分岐

** if, if〜else, if〜else if〜


** 例題 : 偶数判定

*** 偶数判定を行う関数isEventの実装
偶数判定を行う関数isEventの実装を完成させて下さい。

*** 消費税を計算する関数
    int calcTax



* 繰り返し
** while
** for

** 問題
  1. 複利計算
  2. 掛け算九九
  3. 図形の描画
     問題を解くにあたり必要な関数は自由に実装せよ。
     1. 横棒
     2. 四角形
     3. 直角三角形
     4. 二等辺三角形
     5. 平行四辺形

* 配列
同じ種類の複数のデータをまとめたもの

** 問題
  1. 整数の配列から最大値の情報を返す関数を実装し、main関数から呼び出してみなさい。
  2. 2点間のデータの平均値で補完

     1. 2点間のデータを平均値で補完する関数を作成し、main関数から呼び出してみなさい。
     2. データを標準入力から読み出せるようにしなさい。
     3. 作成したプログラムの出力をグラフ化してみなさい。
     4. 作成すたプログラムをパイプを通して処理させてみなさい。

* 構造体
別の種類のデータを一つにまとめたもの

** 問題 
   統計データ



* ポインタ
ポインタとは、ポイントするモノ。
ポイントしているものは、メモリアドレス

変数とは?
人間は識別子が理解しやすい。
コンピュータはアドレス情報で動いている。

これまでの変数ではだめなの?
 1. これまでの変数はどこにあったのか?
 2. 1MBのデータを関数の引数で渡したとするとどうなるかを考えてみよ。

ポインタを使用することでできること。



** 問題
  1. 微分


* 総合
** #includeって何してるの?

** 簡易cat
