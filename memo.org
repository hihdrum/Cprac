#+title: C言語練習

* 学習の流れ
** 関数
** 条件分岐
** 繰り返し
** 配列
** 構造体,共用体
** ポインタ
** コンパイルの流れ
*** ライブラリのリンク
** デバッガ(GDB)
** 総合

* 関数 : 抽象化
関数(function)には、機能や働きという意味があります。
C言語における関数も同じで、一連の処理をまとめて、機能や働きを実現するためのものとなります。

例えば、printf関数は、指定された書式(f:format)で出力(print)する機能を持った関数ということになります。

** 関数と抽象化
関数の利用者は関数内にまとめられた処理について基本的には気にする必要がありません。

関数は名が体を表した関数は、いい関数。

** 関数定義

*** 実装
戻り値の型 関数名(引数の型 引数の名前)
{
  各種処理;

  return 戻り値;
}

戻り値が不要な場合は戻り値の型を void とします。
この場合は、return; を記述するか、return文を省略できます。

**** 1を返すmain関数(return1.c)
int main(void)
{
  return 1;
}

***** 実行例
$ gcc -Wall return1.c -o return1
$ ./return1 ; echo $?
1

*** プロトタイプ宣言
関数は定義順序によって

コンパイル時

**** 例 : 暗黙の宣言(implicit declaration)
$ cat implicit.c 
int main(void)
{
  return f();
}

int f(void)
{
  return 1;
}

$ gcc -Wall f.c 
f.c: In function ‘main’:
f.c:3:10: warning: implicit declaration of function ‘f’ [-Wimplicit-function-declaration]
    3 |   return f();
      |          ^

*** 問題

  1. 「Hello, world!」と標準出力に出力するプログラムを書いて下さい。
      main関数の中に直接実装してかまいません。

  2. 「Hello, world!」出力部分をprintHello関数として実装し、
     main関数から呼び出すようにして下さい。関数の型は以下の様にして下さい。

     void printHello(void)

  3. 2つの整数の和を計算するadd関数を実装し、main関数で呼び出してみなさい。

  4. 角度を度数の単位からラジアン単位に変換する関数を実装しなさい。


** モジュール, ライブラリ


** 関数型スタイル
変数の変更を使用しない関数型のスタイル

関数型言語の場合は末尾再帰がスタックを使用しないgotoになるが、
C言語の場合はそうはならないので、再帰呼出しが深くなりスタック領域を
使い果たすとプログラムが異常終了する。

*** 和を求める関数
*** 積を求める関数


* 条件分岐

** if, if〜else, if〜else if〜


** 例題 : 偶数判定

*** 偶数判定を行う関数isEventの実装
偶数判定を行う関数isEventの実装を完成させて下さい。

*** 消費税を計算する関数
    int calcTax


* 繰り返し
** while
** for

** 問題
  1. 複利計算


* 配列
同じ種類の複数のデータをまとめたもの

** 問題
  1. 整数の配列から最大値の情報を返す関数を実装し、main関数から呼び出してみなさい。
  2. 2点間のデータの平均値で補完

     1. 2点間のデータを平均値で補完する関数を作成し、main関数から呼び出してみなさい。
     2. データを標準入力から読み出せるようにしなさい。
     3. 作成したプログラムの出力をグラフ化してみなさい。
     4. 作成すたプログラムをパイプを通して処理させてみなさい。
     

* 構造体
別の種類のデータを一つにまとめたもの

* ポインタ
ポインタとは、ポイントするモノ。
ポイントしているものは、メモリアドレス

変数とは?
人間は識別子が理解しやすい。
コンピュータはアドレス情報で動いている。

これまでの変数ではだめなの?
 - 1MBのデータを関数の引数で渡したとするとどうなるかを考えてみよ。

** 問題
  1. 微分


* 総合

** 簡易cat
